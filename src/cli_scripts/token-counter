#!/usr/bin/env python3

import sys
import os
import getopt
import platform
import traceback
import logging

from ull.common import handle_path_string, strip_quotes, setup_logging, VERBOSITY_OPTIONS, dump_token_counts, \
    TokenCountError
from ull.common.optconst import *

__version__ = "1.0.0"


def main(argv):
    """
Usage:
    token-counter -i <input_path> [-o <output_path>]  [OPTIONS]

    input_path          Input corpus file or directory path. In case of directory the script will traverse all
                        subdirectories, parsing each file in there and calculating statistics for the whole corpus.
    output_path         Output directory path to store parse text files in. sys.stdout is used if not specified.
                        The program stores parses as text files one output file per one input file in
                        <output_path> directory keeping the same file name for the output file but adding extetions
                        depending on the specified output format.
                        The output file format depends on '-f' option specified. ULL format used if ommited.
                        If directory path is specified as <input_path>, the whole subdirectory tree is recreated
                        inside <output_path>/<dict_name>/ where each output file corresponds to the same input one.

    OPTIONS:
        -h  --help              Print usage info.
        -c  --caps              Leave CAPS untouched.
        -w  --right-wall        Keep RIGHT-WALL tokens.
        -n  --no-strip          Do not strip token suffixes.
        -u  --ull-input         ULL links are used as input. This option should be specified to use only sentences
                                    and filter out link lines.
        -x  --no-left-wall      Exclude LEFT-WALL and period from statistics estimation.
        -I  --input-to-lcase    Convert input stream characters to lower case.
        -v  --verbosity         Verbosity level options: [none, debug, info, warning, error, critical]
        -z  --logging           File logging level options: [none, debug, info, warning, error, critical]
    """
    dict_path       = None
    input_path      = None
    output_path     = None
    options         = 0x00000000 | BIT_STRIP
    linkage_limit   = None
    grammar_path    = None
    template_path   = None
    reference_path  = None
    config_path     = None
    timeout         = 1
    verbosity_level = logging.WARNING
    logging_level   = logging.NOTSET
    stop_tokens     = None
    min_word_count  = None
    max_sentence_len= None

    try:
        app_name = str(os.path.split(__file__)[1]).split(".")[0]

        # hcwnuxIvzio
        opts, args = getopt.getopt(argv, "hcwnuxIi:o:v:z:",
                                   ["help", "caps", "right-wall",
                                    "no-strip", "ull-input",
                                    "no-left-wall",
                                    "input-to-lcase",
                                    "input=",
                                    "output=",
                                    "verbosity=",
                                    "logging="])

        for opt, arg in opts:
            if opt in ("-h", "--help"):
                print(main.__doc__)
                return 0
            elif opt in ("-c", "--caps"):
                options |= BIT_CAPS
            elif opt in ("-w", "--right-wall"):
                options |= BIT_RWALL
            elif opt in ("-n", "--no-strip"):
                options &= (~BIT_STRIP)
            elif opt in ("-u", "--ull-input"):
                options |= BIT_ULL_IN
            elif opt in ("-x", "--no-left-wall"):
                options |= (BIT_NO_LWALL | BIT_NO_PERIOD)
            elif opt in ("-I", "--input-to-lcase"):
                options |= BIT_INPUT_TO_LCASE
            elif opt in ("-i", "--input"):
                input_path = handle_path_string(arg)
            elif opt in ("-o", "--output"):
                output_path = handle_path_string(arg)
            elif opt in ("-v", "--verbosity"):
                verb_key = strip_quotes(arg)

                if verb_key not in VERBOSITY_OPTIONS.keys():
                    raise getopt.GetoptError("Wrong verbosity argument value: ()".format(verb_key))

                verbosity_level = VERBOSITY_OPTIONS[verb_key]
            elif opt in ("-z", "--logging"):
                log_key = strip_quotes(arg)

                if log_key not in VERBOSITY_OPTIONS.keys():
                    raise getopt.GetoptError("Wrong logging argument value: ()".format(log_key))

                logging_level = VERBOSITY_OPTIONS[log_key]

        # print("options=" + bin(options) + " (" + hex(options) + ")")

    except getopt.GetoptError as err:
        print(str(err))
        print(main.__doc__)
        return 1

    if input_path is None:
        print("Error: Input file path is not specified.")
        print(main.__doc__)
        return 1

    if output_path is None:
        output_path = os.environ['PWD']

    setup_logging(verbosity_level, logging_level, output_path + "/" + app_name + ".log", "w")

    logger = logging.getLogger(app_name)

    logger.warning(app_name + " ver." + __version__)
    logger.warning("Python v." + platform.python_version())

    try:
        dump_token_counts(input_path, output_path, options)

    except TokenCountError as err:
        logger.critical(str(err))
        # logger.debug(traceback.print_exc())
        return 1

    except KeyboardInterrupt:
        logger.warning("Ctrl+C triggered. User abort.")
        return 1

    except PermissionError as err:
        logger.critical(str(err))
        return 1

    except Exception as err:
        logger.critical(str(type(err)) + ": " + str(err))
        logger.debug(traceback.print_exc())
        return 1

    return 0


if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
