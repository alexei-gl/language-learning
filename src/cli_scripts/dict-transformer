#!/usr/bin/env python3

import sys
import os
import re
import getopt
import platform
import logging
import traceback

from ull.common import handle_path_string, setup_logging, VERBOSITY_OPTIONS, strip_quotes
from ull.link_grammar.dicttools import rule_subset_dict

__version__ = "1.0.0"


def main(argv):
    """
Usage:
    dict-transformer [-s "<sentense_text>" | -i <corpus_file_path>] -d <source_dict_file> -o <destination_dict_file>

    sentence_text           Sentence text enclosed in quotes or double quotes to subset dictionary rules for.
    corpus_file_path        Corpus file with sentences, separated by the line breaks.
    source_dict_file        Source Link Grammar dictionary file path.
    destination_dict_file   Destination Link Grammar dictionary file path.

    """
    sentence_text   = None
    corpus_path     = None
    src_dict_path   = None
    dst_dict_path   = None
    verbosity_level = logging.WARNING
    logging_level   = logging.ERROR

    try:
        app_name = str(os.path.split(__file__)[1]).split(".")[0]

        print(app_name + " ver." + __version__)
        print("Python v." + platform.python_version())

        opts, args = getopt.getopt(argv, "hs:i:d:o:v:l:", ["help", "sentence=", "input=", "dictionary=", "output=",
                                                           "verbosity=", "logging="])

        for opt, arg in opts:
            if opt in ("-h", "--help"):
                print(main.__doc__)
                return 0

            elif opt in ("-s", "--sentence"):
                sentence_text = strip_quotes(arg)

            elif opt in ("-i", "--input"):
                corpus_path = handle_path_string(arg)

            elif opt in ("-d", "--dictionary"):
                src_dict_path = handle_path_string(arg)

            elif opt in ("-o", "--output"):
                dst_dict_path = handle_path_string(arg)

            elif opt in ("-v", "--verbosity"):
                verb_key = strip_quotes(arg)

                if verb_key not in VERBOSITY_OPTIONS.keys():
                    raise getopt.GetoptError("Wrong verbosity argument value: ()".format(verb_key))

                verbosity_level = VERBOSITY_OPTIONS[verb_key]
            elif opt in ("-l", "--logging"):
                log_key = strip_quotes(arg)

                if log_key not in VERBOSITY_OPTIONS.keys():
                    raise getopt.GetoptError("Wrong logging argument value: ()".format(log_key))

                logging_level = VERBOSITY_OPTIONS[log_key]

        if src_dict_path is None:
            raise getopt.GetoptError("Source dictionary file path is not specified.")

        if dst_dict_path is None:
            raise getopt.GetoptError("Destination dictionary file path is not specified.")

        if sentence_text is None and corpus_path is None:
            raise getopt.GetoptError("Neither sentence nor corpus file is specified.")

    except getopt.GetoptError as err:
        print(str(err))
        print(main.__doc__)
        return 1

    setup_logging(verbosity_level, logging_level, os.path.split(dst_dict_path)[0] + "/" + app_name + ".log", "w")

    logger = logging.getLogger(app_name)

    try:
        if corpus_path is not None:

            with open(corpus_path, "r") as corpus:
                sentences = corpus.read()

            sentence_text = re.findall(re.compile(r"^.+$", re.M), sentences)

        rule_subset_dict(sentence_text, src_dict_path, dst_dict_path)

    except IsADirectoryError as err:
        logger.critical(str(err))
        return 1

    except NameError as err:
        logger.critical(str(err))
        return 1

    except KeyboardInterrupt:
        logger.warning("Ctrl+C triggered.")
        return 1

    except FileNotFoundError as err:
        logger.critical(str(err))
        return 1

    except PermissionError as err:
        logger.critical(str(err))
        return 1

    except Exception as err:
        logger.critical(str(type(err)) + ": " + str(err))
        logger.debug(traceback.print_exc())
        return 1

    return 0


if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
